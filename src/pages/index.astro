---
import { getCollection } from "astro:content";

// Layout import â€” provides basic page elements: <head>, <nav>, <footer> etc.
import BaseLayout from "../layouts/BaseLayout.astro";

// Component Imports
import CallToAction from "../components/CallToAction.astro";
import Grid from "../components/Grid.astro";
import Hero from "../components/Hero.astro";
import Icon from "../components/Icon.astro";
import Pill from "../components/Pill.astro";
import PortfolioPreview from "../components/PortfolioPreview.astro";

// Page section components
import ContactCTA from "../components/ContactCTA.astro";
import Skills from "../components/Skills.astro";

// Content Fetching: List four most recent work projects
const projects = (await getCollection("work"))
  .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
  .slice(0, 4);

// Full Astro Component Syntax:
// https://docs.astro.build/basics/astro-components/
---

<BaseLayout>
  <div class="stack gap-20 lg:gap-48">
    <div class="wrapper stack gap-8 lg:gap-20">
      <header class="hero">
        <Hero
          title="Hello, my name is Ivan Trajanovski"
          tagline="I am a Mobile and Web Full-Stack Developer who is currently based in Austria."
          align="start"
        >
          <div class="roles">
            <Pill><Icon icon="code" size="1.33em" /> Mobile Developer</Pill>
            <Pill
              ><Icon icon="pencil-line" size="1.33em" /> Content Creator</Pill
            >
            <Pill><Icon icon="code" size="1.33em" /> Indie Dev</Pill>
          </div>
        </Hero>

        <img
          alt="Ivan smiling in a blue shirt"
          width="480"
          height="620"
          src="/assets/portrait.jpg"
        />
      </header>

      <Skills />
    </div>

    <main class="wrapper stack gap-20 lg:gap-48">
      <section class="section with-background with-cta">
        <header class="section-header stack gap-2 lg:gap-4">
          <h3>My Recent Work</h3>
        </header>

        <div class="gallery">
          <Grid variant="offset">
            {
              projects.map((project) => (
                <li>
                  <PortfolioPreview project={project} />
                </li>
              ))
            }
          </Grid>
        </div>

        <div class="cta">
          <CallToAction href="/work/">
            View All
            <Icon icon="arrow-right" size="1.2em" />
          </CallToAction>
        </div>
      </section>

      <section class="working-process">
        <h2>My Working Process</h2>
        <ol>
          <li>
            <strong>You book a call with me</strong>
            <p>
              You will contact me and we will pick a date and time that fits
              both of us. I will also send you a form with some basic questions.
            </p>
          </li>
          <li>
            <strong>We have a call</strong>
            <p>
              On the call (or meeting in person) you will present your vision,
              what would you like to achieve. I will provide feedback taking
              into account what is technically possible and what is not.
            </p>
          </li>
          <li>
            <strong>I prepare specification, time & price estimates</strong>
            <p>
              Based on the information you provided me so far I will create a
              specification with time & price estimates.
            </p>
          </li>
          <li>
            <strong>I start working on your application</strong>
            <p>
              As soon as the contract is signed I will start working on the
              application. During that time we will keep each other up to date
              with regular meetings.
            </p>
          </li>
          <li>
            <strong>We deploy your application</strong>
            <p>
              When the application is finished and you are satisfied with the
              result we will deploy the application.
            </p>
          </li>
        </ol>
      </section>

      <ContactCTA />
    </main>
  </div>

  <style>
    .hero {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 2rem;
    }

    .roles {
      display: none;
    }

    .hero img {
      aspect-ratio: 5 / 4;
      object-fit: cover;
      object-position: top;
      border-radius: 1.5rem;
      box-shadow: var(--shadow-md);
    }

    @media (min-width: 50em) {
      .hero {
        display: grid;
        grid-template-columns: 6fr 4fr;
        padding-inline: 2.5rem;
        gap: 3.75rem;
      }

      .roles {
        margin-top: 0.5rem;
        display: flex;
        gap: 0.5rem;
      }

      .hero img {
        aspect-ratio: 3 / 4;
        border-radius: 4.5rem;
        object-fit: cover;
      }
    }

    /* ====================================================== */

    .section {
      display: grid;
      gap: 2rem;
    }

    .with-background {
      position: relative;
    }

    .with-background::before {
      --hero-bg: var(--bg-image-subtle-2);

      content: "";
      position: absolute;
      pointer-events: none;
      left: 50%;
      width: 100vw;
      aspect-ratio: calc(2.25 / var(--bg-scale));
      top: 0;
      transform: translateY(-75%) translateX(-50%);
      background:
        url("/assets/backgrounds/noise.png") top center/220px repeat,
        var(--hero-bg) center center / var(--bg-gradient-size) no-repeat,
        var(--gray-999);
      background-blend-mode: overlay, normal, normal, normal;
      mix-blend-mode: var(--bg-blend-mode);
      z-index: -1;
    }

    .with-background.bg-variant::before {
      --hero-bg: var(--bg-image-subtle-1);
    }

    .section-header {
      justify-self: center;
      text-align: center;
      max-width: 50ch;
      font-size: var(--text-md);
      color: var(--gray-300);
    }

    .section-header h3 {
      font-size: var(--text-2xl);
    }

    @media (min-width: 50em) {
      .section {
        grid-template-columns: repeat(4, 1fr);
        grid-template-areas: "header header header header" "gallery gallery gallery gallery";
        gap: 5rem;
      }

      .section.with-cta {
        grid-template-areas: "header header header cta" "gallery gallery gallery gallery";
      }

      .section-header {
        grid-area: header;
        font-size: var(--text-lg);
      }

      .section-header h3 {
        font-size: var(--text-4xl);
      }

      .with-cta .section-header {
        justify-self: flex-start;
        text-align: left;
      }

      .gallery {
        grid-area: gallery;
      }

      .cta {
        grid-area: cta;
      }
    }

    /* ====================================================== */

    .mention-card {
      display: flex;
      height: 7rem;
      justify-content: center;
      align-items: center;
      text-align: center;
      border: 1px solid var(--gray-800);
      border-radius: 1.5rem;
      color: var(--gray-300);
      background: var(--gradient-subtle);
      box-shadow: var(--shadow-sm);
    }

    @media (min-width: 50em) {
      .mention-card {
        border-radius: 1.5rem;
        height: 9.5rem;
      }
    }

    /* ====================================================== */

    .service-card {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
      border: 1px solid var(--gray-800);
      border-radius: 1.5rem;
      background: var(--gradient-subtle);
      box-shadow: var(--shadow-sm);
    }

    .service-card h4 {
      font-size: var(--text-lg);
      font-weight: var(--font-bold);
    }

    .service-card a {
      text-decoration: none; /* Remove underline by default */
      color: inherit; /* Ensure the text color is inherited */
    }

    .service-card a:hover {
      text-decoration: underline; /* Underline on hover */
    }

    /* ====================================================== */

    .working-process {
      margin-top: 2rem;
      padding: 1.5rem;
      background-color: var(--gray-999_40);
      border-radius: 0.75rem;
      box-shadow: var(--shadow-sm);
    }

    .working-process h2 {
      font-size: var(--text-5xl);
      color: var(--gray-0);
      margin-bottom: 1rem;
      text-align: center;
    }

    .working-process ol {
      list-style: decimal;
      padding-left: 1.5rem;
    }

    .working-process li {
      margin-bottom: 1rem;
      color: var(--gray-200);
      font-size: var(--text-lg);
    }

    .working-process strong {
      color: var(--accent-regular);
      font-size: var(--text-lg);
    }
  </style>
</BaseLayout>
